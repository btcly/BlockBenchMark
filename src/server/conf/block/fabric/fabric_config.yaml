
# Copyright SecureKey Technologies Inc. All Rights Reserved.

# SPDX-License-Identifier: Apache-2.0


# The network connection profile provides client applications the information about the target
# blockchain network that are necessary for the applications to interact with it. These are all
# knowledge that must be acquired from out-of-band sources. This file provides such a source.


# EntityMatchers enable substitution of network hostnames with static configurations
#  so that properties can be mapped. Regex can be used for this purpose
# UrlSubstitutionExp can be empty which means the same network hostname will be used
# UrlSubstitutionExp can be given same as mapped peer url, so that mapped peer url can be used
# UrlSubstitutionExp can have golang regex matchers like ${1}.example.${2}:${3} for pattern
#  like peer0.org1.example.com:1234 which converts peer0.org1.example.com to peer0.org1.example.com:1234
# sslTargetOverrideUrlSubstitutionExp follow in the same lines as
#  SubstitutionExp for the fields gprcOptions.ssl-target-name-override respectively
# In any case mappedHost's config will be used, so mapped host cannot be empty, if entityMatchers are used


#
# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
#
version: 1.0.0

#
# The client section used by GO SDK.
#
client:

  # Which organization does this application instance belong to? The value must be the name of an org
  # defined under "organizations"
  organization: Org1

  logging:
    level: info

  # Global configuration for peer, event service and orderer timeouts
  # if this this section is omitted, then default values will be used (same values as below)
    peer:
      timeout:
        connection: 10s
        response: 180s
        discovery:
         # Expiry period for discovery service greylist filter
         # The channel client will greylist peers that are found to be offline
         # to prevent re-selecting them in subsequent retries.
         # This interval will define how long a peer is greylisted
        greylistExpiry: 10s
  #  eventService:
  # #     the below timeouts are commented out to use the default values that are found in
  # #     "pkg/fab/endpointconfig.go"
  # #     the client is free to override the default values by uncommenting and resetting
  # #     the values as they see fit in their config file
  #    timeout:
      registrationResponse: 15s
    orderer:
      timeout:
        connection: 15s
        response: 15s
    global:
      timeout:
        query: 180s
        execute: 180s
        resmgmt: 180s
      cache:
        connectionIdle: 30s
        eventServiceIdle: 2m
        channelConfig: 30m
        channelMembership: 30s
        discovery: 10s
        selection: 10m

  # Root of the MSP directories with keys and certs.
  cryptoconfig:
    path: /home/masnail/code/block/block_benchmark/src/server/conf/block/fabric/crypto-config

  # Some SDKs support pluggable KV stores, the properties under "credentialStore"
  # are implementation specific
  credentialStore:
    # [Optional]. Used by user store. Not needed if all credentials are embedded in configuration
    # and enrollments are performed elswhere.
    path: "/tmp/state-store"

    # [Optional]. Specific to the CryptoSuite implementation used by GO SDK. Software-based implementations
    # requiring a key store. PKCS#11 based implementations does not.
    cryptoStore:
      # Specific to the underlying KeyValueStore that backs the crypto key store.
      path: /tmp/msp

  # [Optional] BCCSP config for the client. Used by GO SDK.
  BCCSP:
    security:
      enabled: true
      default:
        provider: "SW"
      hashAlgorithm: "SHA2"
      softVerify: true
      level: 256

  tlsCerts:
    # [Optional]. Use system certificate pool when connecting to peers, orderers (for negotiating TLS) Default: false
    systemCertPool: true

    # [Optional]. Client key and cert for TLS handshake with peers and orderers
    # client:
    #   key:
    #     path: /home/masnail/code/block/block_benchmark/src/server/conf/block/fabric/crypto-config/peerOrganizations/org1.example.com/users/User1@org1.example.com/tls/client.key
    #   cert:
    #     path: /home/masnail/code/block/block_benchmark/src/server/conf/block/fabric/crypto-config/peerOrganizations/org1.example.com/users/User1@org1.example.com/tls/client.crt
#
# [Optional]. But most apps would have this section so that channel objects can be constructed
# based on the content below. If an app is creating channels, then it likely will not need this
# section.
#
channels:

  # Default channel is used if channel configuration is missing or if defined channel configuration is missing info
  # If channel doesn't define peers then peers from default channel will be used
  # If channel doesn't define orderes then orderes from default channel will be used
  # If channel doesn't define policies then policies from default channel will be used.
  # Also, if channel defines policies and some policy info is missing than that missing info will be filled from default channel.
  #[Required if _default not defined; Optional if _default defined].
  # name of the channel
  mychannel:

    # list of orderers designated by the application to use for transactions on this
    # channel. This list can be a result of access control ("org1" can only access "ordererA"), or
    # operational decisions to share loads from applications among the orderers.  The values must
    # be "names" of orgs defined under "organizations/peers"
    # deprecated: not recommended, to override any orderer configuration items, entity matchers should be used.
    # orderers:
    #   - orderer1.example.com
    #   - orderer2.example.com
    #   - orderer3.example.com

    #[Required if _default peers not defined; Optional if _default peers defined].
    # list of peers from participating orgs
    peers:
      peer0.org1.example.com:
        # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must
        # have the chaincode installed. The app can also use this property to decide which peers
        # to send the chaincode install request. Default: true
        endorsingPeer: true

        # [Optional]. will this peer be sent query proposals? The peer must have the chaincode
        # installed. The app can also use this property to decide which peers to send the
        # chaincode install request. Default: true
        chaincodeQuery: true

        # [Optional]. will this peer be sent query proposals that do not require chaincodes, like
        # queryBlock(), queryTransaction(), etc. Default: true
        ledgerQuery: true

        # [Optional]. will this peer be the target of the SDK's listener registration? All peers can
        # produce events but the app typically only needs to connect to one to listen to events.
        # Default: true
        eventSource: true

    peer1.org1.example.com:
        endorsingPeer: false
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true

    peer0.org2.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true

    peer1.org2.example.com:
        endorsingPeer: false
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true


#
# list of participating organizations in this network
#
organizations:
  Org1:
    mspid: Org1MSP

    # This org's MSP store (absolute path or relative to client.cryptoconfig)
    cryptoPath:  peerOrganizations/org1.example.com/users/{username}@org1.example.com/msp

    peers:
      - peer0.org1.example.com
      - peer1.org1.example.com

    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based
    # network. Typically certificates provisioning is done in a separate process outside of the
    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for
    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for
    # Fabric-CA servers.
    certificateAuthorities:
      - ca.org1.example.com

  Org2:
    mspid: Org2MSP

    # This org's MSP store (absolute path or relative to client.cryptoconfig)
    cryptoPath:  peerOrganizations/org2.example.com/users/{username}@org2.example.com/msp

    peers:
      - peer0.org2.example.com
      - peer1.org2.example.com

    certificateAuthorities:
      - ca.org2.example.com

  # Orderer Org name
  OrdererOrg:
      # Membership Service Provider ID for this organization
      mspID: OrdererMSP

      # Needed to load users crypto keys and certs for this org (absolute path or relative to global crypto path, DEV mode)
      cryptoPath: ordererOrganizations/example.com/users/Admin@example.com/msp

      peers:
        - orderer1.example.com
        - orderer2.example.com
        - orderer3.example.com



#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:
  orderer1.example.com:
    # [Optional] Default: Infer from hostname
    #    url: orderer1.example.com:7050

    url: grpcs://192.168.93.153:7050
    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      ssl-target-name-override: orderer1.example.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      # Certificate location absolute path
      path: /home/masnail/code/block/block_benchmark/src/server/conf/block/fabric/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem

  orderer2.example.com:
    # [Optional] Default: Infer from hostname
    #    url: orderer1.example.com:7050

    url: grpcs://192.168.93.154:7050
    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      ssl-target-name-override: orderer2.example.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      # Certificate location absolute path
      path: /home/masnail/code/block/block_benchmark/src/server/conf/block/fabric/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem

  orderer3.example.com:
    # [Optional] Default: Infer from hostname
    #    url: orderer1.example.com:7050

    url: grpcs://192.168.93.155:7050
    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      ssl-target-name-override: orderer3.example.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      # Certificate location absolute path
      path: /home/masnail/code/block/block_benchmark/src/server/conf/block/fabric/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem

#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  peer0.org1.example.com:
    # this URL is used to send endorsement and query requests
    # [Optional] Default: Infer from hostname
    #    url: peer0.org1.example.com:7051
    url: grpcs://192.168.93.156:7051

    grpcOptions:
      ssl-target-name-override: peer0.org1.example.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      # Certificate location absolute path
      path: /home/masnail/code/block/block_benchmark/src/server/conf/block/fabric/crypto-config/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem

  peer1.org1.example.com:
    # this URL is used to send endorsement and query requests
    # [Optional] Default: Infer from hostname
    #    url: peer0.org1.example.com:7051
    url: grpcs://192.168.93.146:7051

    grpcOptions:
      ssl-target-name-override: peer1.org1.example.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      # Certificate location absolute path
      path: /home/masnail/code/block/block_benchmark/src/server/conf/block/fabric/crypto-config/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem


  peer0.org2.example.com:
    #        url: peer0.org2.example.com:9051
    url: grpcs://192.168.93.147:7051
    grpcOptions:
      ssl-target-name-override: peer0.org2.example.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      path: /home/masnail/code/block/block_benchmark/src/server/conf/block/fabric/crypto-config/peerOrganizations/org2.example.com/tlsca/tlsca.org2.example.com-cert.pem

  peer1.org2.example.com:
    #        url: peer0.org2.example.com:9051
    url: grpcs://192.168.93.148:7051
    grpcOptions:
      ssl-target-name-override: peer1.org2.example.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      path: /home/masnail/code/block/block_benchmark/src/server/conf/block/fabric/crypto-config/peerOrganizations/org2.example.com/tlsca/tlsca.org2.example.com-cert.pem

  # Fabric-CA is a special kind of Certificate Authority provided by Hyperledger Fabric which allows
  # certificate management to be done via REST APIs. Application may choose to use a standard
  # Certificate Authority instead of Fabric-CA, in which case this section would not be specified.
  #
  #certificateAuthorities:
  #  ca.org1.example.com:
  #    # [Optional] Default: Infer from hostname
  #    url: https://ca.org1.example.com:7054
  #    tlsCACerts:
  #      # Comma-Separated list of paths
  #      path: E:/workspace/go/src/github.com/lifegoeson/blockchain-benchmark/crypto-config/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem
  #      # Client key and cert for SSL handshake with Fabric CA
  #      client:
  #        key:
  #          path: E:/workspace/go/src/github.com/lifegoeson/blockchain-benchmark/crypto-config/peerOrganizations/tls.example.com/users/User1@tls.example.com/tls/client.key
  #        cert:
  #          path: E:/workspace/go/src/github.com/lifegoeson/blockchain-benchmark/crypto-config/peerOrganizations/tls.example.com/users/User1@tls.example.com/tls/client.crt
  #
  #    # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
  #    # needed to enroll and invoke new users.
  #    registrar:
  #      enrollId: admin
  #      enrollSecret: adminpw
  #    # [Optional] The optional name of the CA.
  #    caName: ca.org1.example.com
  #  ca.org2.example.com:
  #    url: https://ca.org2.example.com:8054
  #    tlsCACerts:
  #      # Comma-Separated list of paths
  #      path: E:/workspace/go/src/github.com/lifegoeson/blockchain-benchmark/crypto-config/peerOrganizations/org2.example.com/tlsca/tlsca.org2.example.com-cert.pem
  #      # Client key and cert for SSL handshake with Fabric CA
  #      client:
  #        key:
  #          path: E:/workspace/go/src/github.com/lifegoeson/blockchain-benchmark/crypto-config/peerOrganizations/tls.example.com/users/User1@tls.example.com/tls/client.key
  #        cert:
  #          path: E:/workspace/go/src/github.com/lifegoeson/blockchain-benchmark/crypto-config/peerOrganizations/tls.example.com/users/User1@tls.example.com/tls/client.crt
  #
  #     # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
  #     # needed to enroll and invoke new users.
  #    registrar:
  #      enrollId: admin
  #      enrollSecret: adminpw
  #    # [Optional] The optional name of the CA.
  #    caName: ca.org2.example.com

  # EntityMatchers enable substitution of network hostnames with static configurations
  # so that properties can be mapped. Regex can be used for this purpose
  # UrlSubstitutionExp can be empty which means the same network hostname will be used
  # UrlSubstitutionExp can be given same as mapped peer url, so that mapped peer url can be used
  # UrlSubstitutionExp can have golang regex matchers like ${1}.local.example.${2}:${3} for pattern
  # like peer0.org1.example.com:1234 which converts peer0.org1.example.com to peer0.org1.local.example.com:1234
  # sslTargetOverrideUrlSubstitutionExp follow in the same lines as
  # SubstitutionExp for the fields gprcOptions.ssl-target-name-override respectively
# In any case mappedHost's config will be used, so mapped host cannot be empty, if entityMatchers are used

entityMatchers:
  peer:
    - pattern: (/w+).peer0.org1.example.com
      urlSubstitutionExp: grpcs://192.168.93.156:7051
      sslTargetOverrideUrlSubstitutionExp: peer0.org1.example.com
      mappedHost: peer0.org1.example.com

    - pattern: (/w+).peer1.org1.example.com
      urlSubstitutionExp: grpcs://192.168.93.146:7051
      sslTargetOverrideUrlSubstitutionExp: peer1.org1.example.com
      mappedHost: peer1.org1.example.com

    - pattern: (/w+).peer0.org2.example.com
      urlSubstitutionExp: grpcs://192.168.93.147:7051
      sslTargetOverrideUrlSubstitutionExp: peer0.org2.example.com
      mappedHost: peer0.org2.example.com

    - pattern: (/w+).peer1.org2.example.com
      urlSubstitutionExp: grpcs://192.168.93.148:7051
      sslTargetOverrideUrlSubstitutionExp: peer1.org2.example.com
      mappedHost: peer1.org2.example.com

#   #    - pattern: (/w+).example1.(/w+):(/d+)
#   #      urlSubstitutionExp: ${1}.org1.example.${2}:${3}
#   #      sslTargetOverrideUrlSubstitutionExp: ${1}.org1.example.${2}
#   #      mappedHost: peer0.org1.example.com
#   #
#   #    - pattern: (/w+).org1.example.(/w+):(/d+)
#   #      urlSubstitutionExp: peer0.org1.example.com:7051
#   #      sslTargetOverrideUrlSubstitutionExp: peer0.org1.example.com
#   #      mappedHost: peer0.org1.example.com

  orderer:
    - pattern: (/w+).orderer1.example.com
      urlSubstitutionExp: grpcs://192.168.93.153:7050
      sslTargetOverrideUrlSubstitutionExp: orderer1.example.com
      mappedHost: orderer1.example.com

    - pattern: (/w+).orderer2.example.com
      urlSubstitutionExp: grpcs://192.168.93.154:7050
      sslTargetOverrideUrlSubstitutionExp: orderer2.example.com
      mappedHost: orderer2.example.com

    - pattern: (/w+).orderer3.example.com
      urlSubstitutionExp: grpcs://192.168.93.155:7050
      sslTargetOverrideUrlSubstitutionExp: orderer3.example.com
      mappedHost: orderer3.example.com


    


      # - "orderer1.example.com:192.168.93.153"
      # - "orderer2.example.com:192.168.93.154"
      # - "orderer3.example.com:192.168.93.155"
      # - "peer0.org1.example.com:192.168.93.156"
      # - "peer1.org1.example.com:192.168.93.146"
      # - "peer0.org2.example.com:192.168.93.147"
      # - "peer1.org2.example.com:192.168.93.148"

